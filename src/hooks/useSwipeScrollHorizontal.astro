<main>
  <div class='slides-container'>
    <div class='slides-inner'>
      <div class='slide'>1</div>
      <div class='slide'>2</div>
      <div class='slide'>3</div>
      <div class='slide'>4</div>
      <div class='slide'>5</div>
      <div class='slide'>6</div>
      <div class='slide'>7</div>
      <div class='slide'>8</div>
      <div class='slide'>9</div>
      <div class='slide'>10</div>
    </div>
  </div>
</main>

<style>
  main {
    display: flex;
    position: relative;
    flex-direction: column;
    width: 100vw;
    height: 100vh;
  }

  .slides-container {
    position: relative;
    overflow: hidden;
    display: flex;
    flex: 1;
  }

  .slide {
    position: absolute;
    font-size: 90px;
    font-weight: 700;
    color: rgba(255, 255, 255, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    width: calc(100% / 3);
    width: 100%;
  }

  .slides-inner {
    position: relative;
    height: 100%;
    width: 100%;
    overflow: hidden;
  }
</style>

<script>
  import gsap from 'gsap';
  import Draggable from 'gsap/Draggable';
  import InertiaPlugin from 'gsap/InertiaPlugin';
  gsap.registerPlugin(Draggable, InertiaPlugin);
  const $$ = <T extends Element = HTMLElement>(selector: string) =>
    document.querySelectorAll<T>(selector);
  const slides = $$('.slide');

  const slideDelay = 1.5;
  const slideDuration = 0.3;
  const wrap = true;

  const numSlides = slides.length;
  const progressWrap = gsap.utils.wrap(0, 1);

  gsap.set(slides, {
    backgroundColor:
      'random([red, blue, green, purple, orange, yellow, lime, pink])',
    xPercent: (i: number) => i * 100
  });

  const wrapX = gsap.utils.wrap(-100, (numSlides - 1) * 100);
  const timer = gsap.delayedCall(slideDelay, autoPlay);

  function autoPlay() {
    if (draggable.isPressed || draggable.isDragging || draggable.isThrowing) {
      timer.restart(true);
    } else {
      animateSlides(-1);
    }
  }

  const animation = gsap.to(slides, {
    xPercent: `+=${numSlides * 100}`,
    duration: 1,
    ease: 'none',
    paused: true,
    repeat: -1,
    modifiers: { xPercent: wrapX }
  });

  const proxy = document.createElement('div');
  let slideAnimation = gsap.to({}, {});
  let slideWidth = 0;
  let wrapWidth = 0;

  const draggable = new Draggable(proxy, {
    trigger: '.slides-container',
    inertia: true,
    onPress: updateDraggable,
    onDrag: updateProgress,
    onThrowUpdate: updateProgress,
    snap: { x: snapX }
  });

  resize();
  window.addEventListener('resize', resize);

  function updateDraggable(this: Draggable) {
    timer.restart(true);
    slideAnimation.kill();
    this.update();
  }

  function animateSlides(direction: number) {
    timer.restart(true);
    slideAnimation.kill();
    const x = snapX(
      (gsap.getProperty(proxy, 'x') as number) + direction * slideWidth
    );
    slideAnimation = gsap.to(proxy, {
      x,
      duration: slideDuration,
      onUpdate: updateProgress
    });
  }

  function snapX(value: number) {
    const snapped = gsap.utils.snap(slideWidth, value);
    return wrap
      ? snapped
      : gsap.utils.clamp(-slideWidth * (numSlides - 1), 0, snapped);
  }

  function updateProgress() {
    animation.progress(
      progressWrap((gsap.getProperty(proxy, 'x') as number) / wrapWidth)
    );
  }

  function resize() {
    const norm = (gsap.getProperty(proxy, 'x') as number) / wrapWidth || 0;
    slideWidth = (slides[0] as HTMLElement).offsetWidth;
    wrapWidth = slideWidth * numSlides;

    if (!wrap) {
      draggable.applyBounds({
        minX: -slideWidth * (numSlides - 1),
        maxX: 0
      });
    }

    gsap.set(proxy, { x: norm * wrapWidth });
    animateSlides(0);
    slideAnimation.progress(1);
  }
</script>

import {
  generateExactlyCommonProps,
  generateArrayPostsOfImages,
  generateArrayPostsOfVideos
} from '@/publicData/functions/amPublicFunctions';

const username = 'lucioarese';
const userId = '';
const prefixUrl = '';
const followers = 177_720;
const followed = 50;
const profileDescription = ` Composer, guitarist, pianist, architect, visual artist, award winning filmmaker `;
const prefixLetterVideos = 'v';
const quantityOfVideos = 6;
const prefixLetterImages = 'n';
const quantityOfImages = 0;
const profileImageSrc = `${prefixUrl}p3rfil.avif`;

/* prettier-ignore */
const arrayDescriptionsOfVideos = [
  `Visual analysis of a blackcap singing. As a new project expansion I developed a way to create snapshots of the live generated structure at every moment, so that the 3d points/number printouts can become distinct structures and datasets for every verse and vocalization. They can be collected together and reutilized in different ways, compared and even be interacted with. It's a good way to fix the uninterrupted data flow at certain points of interests. Every datapoint has four different sets of information: the color which indicates the most active frequency band at emission time, an amplitude value on top (scale 0 to 1), a lifetime on the left (in seconds, animated, starting from zero at the moment of emission), and an absolute emission time on bottom (in seconds, with the counter starting from 0 at the beginning of the animation). Created with Touchdesigner, filmed and recorded by myself. #blackcap #bird #birdsong #generative #touchdesigner #datavisualization #realtime #nature`, /*1*/
  `#sound #soundanalysis #realtime #touchdesigner #datavisualization`, /*2*/
  `More experiments on realtime visual correlations for the data calculated with my models. I recorded lots of nightingales in the past few years so I have a big audio pool to test with. I figured out that in the Spread-Centroid-Entropy space (lower graph) the faster trills and rattles get into tight clusters, while slower modulations-buzzes shape 3d paths and clouds in space. So I figured that calculating the mean distance of the points and combining it with amplitude modulation could be a way to try classify the different features of the vocalize on the fly. It's far from perfect and I'm no ornithologist, but it can have some accuracy. I'm sure real researchers would be able to modulate all this data in much more efficient ways! #nightingale #generative #bioacoustics #realtime #touchdesigner #birdsong #datavisualization #audioanalysis`, /*3*/
  `#realtime #visual #touchdesigner #generative #creativecoding #visualmusic`, /*4*/
  `Visualizing the song of a blackbird (Turdus merula) with visuals composited on live footage. New add-on: the points color now is completely independent from the visual shapes/development and it's related exclusively on frequency. A color band below indicates which color corresponds to a specific frequency band, in a range from 2k Hz to 8k Hz which is roughly where this blackbird song develops. Each point brings the color of the most active frequency band at that specific moment (roughly, considering there are multiple frequencies constantly at play, harmonics etc). A spectrogram image of the audio is at the bottom, to give a better idea of how the frequency range is translated visually. This visual is a datapoint model generated by amplitude oscillations, no fixed measurements on the axes. Each point has an amplitude value (top) on a scale of 0 to 1 and an emission lifetime (bottom), measured in frames at a rate of 60 fps. The animation is generative and meant to be looped with ever changing shapes. Created with Touchdesigner, filmed and recorded by myself. #blackbird #datavisualization #touchdesigner #bird #birdsong #generative #realtime #visual`, /*5*/
  `#chaffinch #bird #birdsong #touchdesigner #visual #nature #datavisualization #realtime`, /*6*/
  ``, /*7*/
  ``, /*8*/
  ``, /*9*/ 
  ``, /*10*/
  ``, /*11*/
  ``, /*12*/
  ``, /*13*/
  ``, /*14*/
  ``, /*15*/
  ``, /*16*/
  ``, /*17*/
  ``, /*18*/
  ``, /*19*/
  ``, /*20*/
];

/* prettier-ignore */
const arrayDescriptionOfImages = [
  ``, /*1*/
  ``, /*2*/
  ``, /*3*/
  ``, /*4*/
  ``, /*5*/
  ``, /*6*/
  ``, /*7*/
  ``, /*8*/
  ``, /*9*/
  ``, /*10*/
  ``, /*11*/
  ``, /*12*/
  ``, /*13*/
  ``, /*14*/
  ``, /*15*/
  ``, /*16*/
  ``, /*17*/
  ``, /*18*/
  ``, /*19*/
  ``, /*20*/
]

export const lucioarese_commonProps = generateExactlyCommonProps({
  profileImageSrc,
  userId,
  username,
  followers,
  followed,
  profileDescription
});

const lucioarese_videos = generateArrayPostsOfVideos({
  prefixLetterVideos,
  prefixUrl,
  quantityOfVideos,
  userId,
  arrayDescriptionsOfVideos
});

const lucioarese_images = generateArrayPostsOfImages({
  prefixLetterImages,
  prefixUrl,
  userId,
  quantityOfImages,
});

export const lucioarese_array_of_posts = [
  ...lucioarese_images,
  ...lucioarese_videos
];
